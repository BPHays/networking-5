import socket, sys, struct
from socket import htons, AF_INET, AF_PACKET, SOCK_DGRAM, SOCK_RAW, IP_HDRINCL, IPPROTO_IP, IPPROTO_RAW, SOL_SOCKET
ETH_P_IP = 8
TCP = 6
SO_BINDTODEVICE = 25
ps = socket.socket(AF_PACKET, SOCK_DGRAM, ETH_P_IP);
ps.bind((sys.argv[1], htons(ETH_P_IP)));
rs = socket.socket(AF_INET, SOCK_RAW, IPPROTO_RAW)
rs.setsockopt(SOL_SOCKET, SO_BINDTODEVICE, sys.argv[1])
#rs.setsockopt(IPPROTO_IP, IP_HDRINCL, 1);
port = int(sys.argv[2])

'''
def get_ip_str(ip_num):
    return '.'.join(str(octet) for octet in struct.unpack('!BBBB', struct.pack('!I', ip_num)))

def unpack_ipv4_header(ip_header):
    version_ihl, dscp_ecn, total_len, ident, flags_frag_offset, ttl, protocol, checksum, src_ip, dst_ip = struct.unpack('!BBHHHBBHII', ip_header[:20])
    return {'ihl': version_ihl & 0xF, 'protocol': protocol, 'src_ip': src_ip, 'dst_ip': dst_ip, 'ident': ident, 'ttl': ttl};

def unpack_tcp_header(tcp_header):
    src_port,dst_port,seq_num,ack_num,info_1,info_2,window_size,checksum = struct.unpack('!HHIIBBHH', tcp_header[:18])
    return {'src_port': src_port, 'dst_port': dst_port, 'seq_num': seq_num, 'ack_num': ack_num, 'data_offset': (info_1 & 0xF0) >> 4, 'flags': {'ns': info_1 & 0x1, 'cwr': info_2 & 0x80, 'ece': info_2 & 0x40, 'urg': info_2 & 0x20, 'ack': info_2 & 0x10, 'psh': info_2 & 0x8, 'rst': info_2 & 0x4, 'syn': info_2 & 0x2, 'fin': info_2 & 0x1}, 'window_size': window_size, 'checksum': checksum}

def pack_ipv4_header(version, ihl, dscp, ecn, total_len, ident, flags, frag_offset, ttl, protocol, checksum, src_addr, dst_addr):
    return struct.pack("!BBHHHBBHII", (version << 4) | ihl, ((dscp & 0x3F) << 2) | (ecn & 0x3), total_len, ident, ((flags & 0x7) << 13) | (frag_offset & 0x1FFF), ttl, protocol, checksum, src_addr, dst_addr)

def pack_tcp_header(src_port, dst_port, seq_num, ack_num, data_offset, ns, cwr, ece, urg, ack, psh, rst, syn, fin, window_size, checksum, urg_ptr):
    return struct.pack("!HHIIBBHHH", src_port, dst_port, seq_num, ack_num, ((data_offset & 0xF) << 4) | (ns & 1), ((cwr & 1) << 7) | ((ece & 1) << 6) | ((urg & 1) << 5) | ((ack & 1) << 4) | ((psh & 1) << 3) | ((rst & 1) << 2) | ((syn & 1) << 1) | (fin & 1), window_size, checksum, urg_ptr)

def checksum(data):
    s = 0
    n = len(data) % 2
    for i in range(0, len(data)-n, 2):
        s+= ord(data[i]) + (ord(data[i+1]) << 8)
    if n:
        s+= ord(data[i+1])
    while (s >> 16):
        print("s >> 16: ", s >> 16)
        s = (s & 0xFFFF) + (s >> 16)
    print("sum:", s)
    s = ~s & 0xffff
    return s

def tcp_checksum(unpacked_ipv4_header, packed_tcp_header):
    pseudo_checksum = struct.pack('!IIBBH', unpacked_ipv4_header['src_ip'], unpacked_ipv4_header['dst_ip'], 0, TCP, 5) + packed_tcp_header
    return checksum(pseudo_checksum)

'''

class ip(object):
    def __init__(self, source, destination):
        self.version = 4
        self.ihl = 5 # Internet Header Length
        self.tos = 0 # Type of Service
        self.tl = 0 # total length will be filled by kernel
        self.id = 54321
        self.flags = 0 # More fragments
        self.offset = 0
        self.ttl = 255
        self.protocol = socket.IPPROTO_TCP
        self.checksum = 0 # will be filled by kernel
        self.source = socket.inet_aton(source)
        self.destination = socket.inet_aton(destination)
    def pack(self):
        ver_ihl = (self.version << 4) + self.ihl
        flags_offset = (self.flags << 13) + self.offset
        ip_header = struct.pack("!BBHHHBBH4s4s",
                    ver_ihl,
                    self.tos,
                    self.tl,
                    self.id,
                    flags_offset,
                    self.ttl,
                    self.protocol,
                    self.checksum,
                    self.source,
                    self.destination)
        return ip_header

class tcp(object):
    def __init__(self, srcp, dstp):
        self.srcp = srcp
        self.dstp = dstp
        self.seqn = 0
        self.ackn = 0
        self.offset = 5 # Data offset: 5x4 = 20 bytes
        self.reserved = 0
        self.urg = 0
        self.ack = 0
        self.psh = 0
        self.rst = 1
        self.syn = 0
        self.fin = 0
        self.window = socket.htons(5840)
        self.checksum = 0
        self.urgp = 0
        self.payload = ""
    def pack(self, source, destination):
        data_offset = (self.offset << 4) + 0
        flags = self.fin + (self.syn << 1) + (self.rst << 2) + (self.psh << 3) + (self.ack << 4) + (self.urg << 5)
        tcp_header = struct.pack('!HHLLBBHHH',
                     self.srcp,
                     self.dstp,
                     self.seqn,
                     self.ackn,
                     data_offset,
                     flags, 
                     self.window,
                     self.checksum,
                     self.urgp)
        #pseudo header fields
        source_ip = source
        destination_ip = destination
        reserved = 0
        protocol = socket.IPPROTO_TCP
        total_length = len(tcp_header) + len(self.payload)
        # Pseudo header
        psh = struct.pack("!4s4sBBH",
              source_ip,
              destination_ip,
              reserved,
              protocol,
              total_length)
        psh = psh + tcp_header + self.payload
        tcp_checksum = checksum(psh)
        tcp_header = struct.pack("!HHLLBBH",
                  self.srcp,
                  self.dstp,
                  self.seqn,
                  self.ackn,
                  data_offset,
                  flags,
                  self.window)
        tcp_header+= struct.pack('H', tcp_checksum) + struct.pack('!H', self.urgp)
        return tcp_header

def checksum(data):
    s = 0
    n = len(data) % 2
    for i in range(0, len(data)-n, 2):
        s+= ord(data[i]) + (ord(data[i+1]) << 8)
    if n:
        s+= ord(data[i+1])
    while (s >> 16):
        print("s >> 16: ", s >> 16)
        s = (s & 0xFFFF) + (s >> 16)
    print("sum:", s)
    s = ~s & 0xffff
    return s

while True:
    data, addr = ps.recvfrom(4096)
    ipv4_header = unpack_ipv4_header(data)
    if ipv4_header['protocol'] == TCP:
        tcp_header = unpack_tcp_header(data[ipv4_header['ihl'] * 4:])
        tcp_data = data[(ipv4_header['ihl'] * 4) + (tcp_header['data_offset'] * 4):]
        if len(tcp_data) > 0 and (tcp_header['src_port'] == port or tcp_header['dst_port'] == port):
            print "saw message on port"
            response_ipv4_header = pack_ipv4_header(version=4,ihl=ipv4_header['ihl'],dscp=0,ecn=0,total_len=40,ident=ipv4_header['ident']+1,flags=0x02,frag_offset=0,ttl=ipv4_header['ttl'],protocol=TCP,checksum=0,src_addr=ipv4_header['src_ip'],dst_addr=ipv4_header['dst_ip'])
            response_tcp_without_checksum = pack_tcp_header(src_port=tcp_header['src_port'],dst_port=tcp_header['dst_port'],seq_num=tcp_header['seq_num']+len(tcp_data),ack_num=tcp_header['ack_num'],data_offset=5,ns=0,cwr=0,ece=0,urg=0,ack=1,psh=0,rst=1,syn=0,fin=0,window_size=tcp_header['window_size'],checksum=0,urg_ptr=0)
            my_tcp_checksum=tcp_checksum(ipv4_header, response_tcp_without_checksum)
            response_tcp_header = pack_tcp_header(src_port=tcp_header['src_port'],dst_port=tcp_header['dst_port'],seq_num=tcp_header['seq_num']+len(tcp_data),ack_num=tcp_header['ack_num'],data_offset=5,ns=0,cwr=0,ece=0,urg=0,ack=1,psh=0,rst=1,syn=0,fin=0,window_size=tcp_header['window_size'],checksum=my_tcp_checksum,urg_ptr=0)
            rs.sendto(response_ipv4_header + response_tcp_header, ('127.0.0.1', 0))

